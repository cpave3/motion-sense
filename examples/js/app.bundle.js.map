{"version":3,"sources":["webpack://Motion/webpack/bootstrap","webpack://Motion/./src/CoreSensor.js","webpack://Motion/./index.js","webpack://Motion/./src/Gyroscope.js","webpack://Motion/./src/Accelerometer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CoreSensor","_this","this","_classCallCheck","delegate","document","createDocumentFragment","forEach","f","apply","arguments","_this2","events","started","event","running","stopped","keys","eventName","addEventListener","window","DeviceMotionEvent","newFrequency","config","frequency","initClock","_this3","intervalTicker","clearInterval","readyToEmit","interval","Math","round","setInterval","Gyroscope","Accelerometer","defaultOptions","options","length","undefined","_possibleConstructorReturn","__proto__","getPrototypeOf","option","internals","dispatchEvent","CustomEvent","detail","rotationRate","isReady","handleDeviceMotion","Event","message","console","error","removeEventListener","acceleration","accelerationIncludingGravity"],"mappings":"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","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","class CoreSensor {\n    constructor() {\n        const delegate = document.createDocumentFragment();\n        [\n          'addEventListener',\n          'dispatchEvent',\n          'removeEventListener'\n        ].forEach(f =>\n          this[f] = (...xs) => delegate[f](...xs)\n        )\n  }\n    /**\n     * These closures will fire when their keyed event happens\n     */\n    internals() {\n        const events = {\n            started: event => {\n                this.running = true;\n            },\n            stopped: event => {\n                this.running = false;\n            }\n        };\n\n        Object.keys(events).forEach(eventName => {\n            this.addEventListener(eventName, events[eventName]);\n        });\n    };\n\n    isReady() {\n        return !!window.DeviceMotionEvent;\n    };\n\n    /**\n     * This method sets the desired number of sensor reads per second\n     * @param {number} newFrequency \n     */\n    setFrequency(newFrequency) {\n        this.config.frequency = newFrequency;\n        if (this.running) {\n            this.initClock();\n        }\n    }\n\n    /**\n     * This method is used to start the internal timer upon which the sensor readings depend\n     */\n    initClock() {\n        const { frequency } = this.config;\n        if (this.intervalTicker) {\n            clearInterval(this.intervalTicker);\n        }\n        this.readyToEmit = false;\n        // We should be able to get sensor data from the device\n        const interval = Math.round(1000 / frequency);\n        this.intervalTicker = setInterval(() => {\n            this.readyToEmit = true;\n        }, interval);\n    }\n}\n\nmodule.exports = CoreSensor;\n","module.exports = {\n    Gyroscope: require('./src/Gyroscope'),\n    Accelerometer: require('./src/Accelerometer')    \n};\n","const defaultOptions = {\n    frequency: 60\n};\n\nconst CoreSensor = require('./CoreSensor.js');\n\nclass Gyroscope extends CoreSensor {\n    constructor(options = {}) {\n        super();\n        this.config = {};\n        Object.keys(defaultOptions).forEach(option => {\n            this.config[option] = options[option] || defaultOptions[option];\n        });\n        this.readyToEmit = true;\n        this.running = false;\n        this.internals();\n    }\n\n    /**\n     * This method handles the data coming from the DeviceMotionEvent\n     * @param {DeviceMotionEvent} event \n     */\n    handleDeviceMotion(event) {\n        /**\n         * Each time we get data from the sensor, we need to check if it\n         * is time to emit a new event yet. This is based on the user-defined\n         * frequency passed to the constructor\n         */\n        if (this.readyToEmit) {\n            this.dispatchEvent(new CustomEvent('reading', {detail: {rotationRate: event.rotationRate}}));\n            this.readyToEmit = false;\n        }\n    };   \n\n    /**\n     * This method checks if the device is ready and starts reading data at the requested frequency\n     */\n    start() {\n       if(this.isReady()) {\n           this.initClock();\n           window.addEventListener('devicemotion', event => this.handleDeviceMotion(event));         \n           this.dispatchEvent(new Event('started'));\n       } else {\n            // We cannot access the device motion event, so this won't work\n            this.dispatchEvent(new CustomEvent('error', { message: 'Could not find window.deviceMotionEvent' }));\n            console.error('Could not find window.deviceMotionEvent');\n       }\n    };\n\n    /**\n     * This method removes the event listener and stops the flow of data from the sensor\n     */\n    stop() {\n        window.removeEventListener('devicemotion', event => this.handleDeviceMotion(event));\n        this.dispatchEvent(new Event('stopped'));\n        clearInterval(this.intervalTicker);\n    };\n}\n\nmodule.exports = Gyroscope;\n","const defaultOptions = {\n    frequency: 60\n};\n\nconst CoreSensor = require('./CoreSensor.js');\n\nclass Accelerometer extends CoreSensor {\n    constructor(options = {}) {\n        super();\n        this.config = {};\n        Object.keys(defaultOptions).forEach(option => {\n            this.config[option] = options[option] || defaultOptions[option];\n        });\n        this.readyToEmit = true;\n        this.running = false;\n        this.internals();\n    }\n\n    \n\n    /**\n     * This method handles the data coming from the DeviceMotionEvent\n     * @param {DeviceMotionEvent} event \n     */\n    handleDeviceMotion(event) {\n        /**\n         * Each time we get data from the sensor, we need to check if it\n         * is time to emit a new event yet. This is based on the user-defined\n         * frequency passed to the constructor\n         */\n        if (this.readyToEmit) {\n            this.dispatchEvent(new CustomEvent('reading', {detail: {\n                acceleration: event.acceleration,\n                accelerationIncludingGravity: event.accelerationIncludingGravity\n            }}));\n            this.readyToEmit = false;\n        }\n    };   \n\n    /**\n     * This method checks if the device is ready and starts reading data at the requested frequency\n     */\n    start() {\n       if(this.isReady()) {\n           this.initClock();\n           window.addEventListener('devicemotion', event => this.handleDeviceMotion(event));         \n           this.dispatchEvent(new Event('started'));\n       } else {\n            // We cannot access the device motion event, so this won't work\n            this.dispatchEvent(new CustomEvent('error', { message: 'Could not find window.deviceMotionEvent' }));\n            console.error('Could not find window.deviceMotionEvent');\n       }\n    };\n\n    /**\n     * This method removes the event listener and stops the flow of data from the sensor\n     */\n    stop() {\n        window.removeEventListener('devicemotion', event => this.handleDeviceMotion(event));\n        this.dispatchEvent(new Event('stopped'));\n        clearInterval(this.intervalTicker);\n    };\n\n    \n}\n\nmodule.exports = Accelerometer;\n"],"sourceRoot":""}